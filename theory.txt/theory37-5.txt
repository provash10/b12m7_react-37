37-5 (Advanced) Understand the concept of use() hook
-----------------------------------------------------
Users.JSX

1. Components
2. JSX
3. props
4. State
5. Events
6. [Conditonal Rendering]


7. API : url 

json palceholder >>> user>>> click 

fetch--------------->>>>

async ---> await

JSONPlaceholder >> https://jsonplaceholder.typicode.com/users

fetch("https://jsonplaceholder.typicode.com/users")
.then((res)=>res.json())
.then(data=>console.log(data));

// OR,
 const loadData =async()=>{
    const res = await fetch("https://jsonplaceholder.typicode.com/users")
    const data = res.json();
    return data;
 }

 --->  react 
 https://react.dev/learn/managing-state

<Suspense>
<Suspense> lets you display a fallback until its children have finished loading.

<Suspense fallback={<Loading />}>
  <SomeComponent />
</Suspense>


<Fragment> (<>...</>)
<Fragment>, often used via <>...</> syntax, lets you group elements without a wrapper node.

<>
  <OneChild />
  <AnotherChild />
</>

<StrictMode> 
Use StrictMode to enable additional development behaviors and warnings for the component tree inside:

import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';

const root = createRoot(document.getElementById('root'));
root.render(
  <StrictMode>
    <App />
  </StrictMode>
);

API >>>
Built-in React APIs
In addition to Hooks and Components, the react package exports a few other APIs that are useful for defining components. This page lists all the remaining modern React APIs.


use
use is a React API that lets you read the value of a resource like a Promise or context.

const value = use(resource);


Reference 
use(resource) 
Call use in your component to read the value of a resource like a Promise or context.

import { use } from 'react';

function MessageComponent({ messagePromise }) {
  const message = use(messagePromise);
  const theme = use(ThemeContext);
  // ...


  Streaming data from the server to the client 
Data can be streamed from the server to the client by passing a Promise as a prop from a Server Component to a Client Component.

import { fetchMessage } from './lib.js';
import { Message } from './message.js';

export default function App() {
  const messagePromise = fetchMessage();
  return (
    <Suspense fallback={<p>waiting for message...</p>}>
      <Message messagePromise={messagePromise} />
    </Suspense>
  );
}


Streaming data from the server to the client 
Data can be streamed from the server to the client by passing a Promise as a prop from a Server Component to a Client Component.

import { fetchMessage } from './lib.js';
import { Message } from './message.js';

export default function App() {
  const messagePromise = fetchMessage();
  return (
    <Suspense fallback={<p>waiting for message...</p>}>
      <Message messagePromise={messagePromise} />
    </Suspense>
  );
}

==============================


import Users from './Users';
import Batsman from './Batsman';
import Counter from './Counter';
import './App.css'

function App() {

  function handleClick(){
    alert('I am clicked..')
  }
  function handleClick2(){
    alert('I am clicked 2.')
  }
  
  const handleClick3=()=>{
    alert('Clicked 3 !!!')
  }

  // const handleadd5=(num)=>{
  //   const newNum = num + 5;
  //   alert(newNum);
  // }

   const handleadd6=(num)=>{
    const newNum = num + 13;
    alert(newNum);
  }

  return (
    <>
      <h1>Vite + React</h1>
      <Users></Users>
      <Batsman></Batsman>
      <Counter></Counter>
      

      {/* <button onclick = "handleClick()">Click Me</button> */}
      <button onClick={handleClick}>Click Me</button>
      <button onClick={handleClick2}>Click Me 2</button>
      <button onClick={handleClick3}>Click Me 3</button>
      <button onClick={handleClick}>Click Me 4</button>

      {/* <button onClick={handleadd5(7)}>Click Add 5</button> */}
      <button onClick={()=>handleadd6(27)}>Click Add 6</button> 
    </>
  )
}

export default App


--->

export default function Users(){
    return(
        <div className="card">
        <h3>Users : </h3>
        </div>
    )
}

----------->>css
.card{
  border : 2px solid gold;
  margin : 10px;
  padding : 10px;
  border-radius: 25px;
}